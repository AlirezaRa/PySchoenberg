import basicMusic
import atonalize
import aes


def normal2tuple(list12note):
    # Input is a list which is a permutation of basicMusic.normal_universe. This
    # function results in the permutation's equivalent in basicMusic.universe
    # derived from basicMusic.correlative_universe.
    result = []
    for element in list12note:
        result.append(tuple(basicMusic.correlative_universe[element]))
    return result


def methodsnum(list12note):
    # Assign a number to all of the available methods on 12-tone matrix that is
    # generated by the given list12note.
    methodsnumbers = {}
    matrix = atonalize.genmatrix(atonalize.rand12wn(normal2tuple(list12note)))
    lrmatrix = atonalize.lr(matrix)
    udmatrix = atonalize.ud(matrix)
    for rowcol in range(12):
        methodsnumbers[rowcol] = lrmatrix[rowcol]
        methodsnumbers[rowcol + 12] = udmatrix[rowcol]
    return methodsnumbers


def ciphernum(ciphertext):
    # For a given ciphertext, it'll assign numbers from aes.num_rep to each
    # character. This will later be connected to methodsnum so that one get a
    # method of 12-tone matrix for a given character of the ciphertext.
    cipherlist = list(ciphertext)
    cipherlist.reverse()
    list_char_num = []
    num_rep_complete = aes.num_rep_complete.copy()
    loop_invariant = len(cipherlist)
    for i in range(loop_invariant):
        temp = cipherlist.pop()
        for j in range(len(num_rep_complete.keys())):
            if temp == num_rep_complete[j]:
                list_char_num.append(j)
                break
    return list_char_num
